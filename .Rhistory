))
rules <- apriori(sslc.subset,
appearance = list(rhs = c("URBAN_RURAL=Rural"),
lhs = c("SCHOOL_TYPE=Government")
))
rules.sorted <- sort(rules, by = "lift")
inspect(prune(rules.sorted))
rules <- apriori(sslc.subset,
appearance = list(rhs = c("URBAN_RURAL=Rural"),
lhs = c("SCHOOL_TYPE=Government"),
default="both"))
rules.sorted <- sort(rules, by = "lift")
inspect(prune(rules.sorted))
rules <- apriori(sslc.subset,
appearance = list(rhs = c("URBAN_RURAL=Rural"),
default="lhs"))
rules.sorted <- sort(rules, by = "lift")
inspect(rules.sorted)
View(sslc)
sslc.subset <- subset(sslc,
select=c("NRC_CLASS", "SCHOOL_TYPE", "URBAN_RURAL", "NRC_CASTE_CODE", "NRC_GENDER_CODE",
"NRC_MEDIUM", "NRC_PHYSICAL_CONDITION", "CANDIDATE_TYPE",
"L1_RESULT", "L2_RESULT", "L3_RESULT",
"S1_RESULT", "S2_RESULT", "S3_RESULT"))
View(sslc.subset)
View(sslc)
unique(sslc.subset$L1_SUBJECT)
sslc.subset <- subset(sslc,
select=c("NRC_CLASS", "SCHOOL_TYPE", "URBAN_RURAL", "NRC_CASTE_CODE", "NRC_GENDER_CODE",
"NRC_MEDIUM", "NRC_PHYSICAL_CONDITION", "CANDIDATE_TYPE",
"L1_RESULT", "L2_RESULT", "L3_RESULT",
"S1_RESULT", "S2_RESULT", "S3_RESULT"))
unique(sslc.subset$L1_RESULT)
sslc.subset <- subset(sslc.subset, L1_RESULT != NA)
unique(sslc.subset$L1_RESULT)
sslc.subset$L1_RESULT <- sapply(sslc.subset$L1_RESULT, as.character)
sslc.subset$L1_RESULT[sslc.subset$L1_RESULT == "A"] <- "Absent"
sslc.subset$L1_RESULT[sslc.subset$L1_RESULT == "F"] <- "Fail"
sslc.subset$L1_RESULT[sslc.subset$L1_RESULT == "P"] <- "Pass"
sslc.subset$L1_RESULT <- as.factor(sslc.subset$L1_RESULT)
sslc.subset$L1_RESULT <- as.factor(sslc.subset$L1_RESULT)
sslc.subset <- subset(sslc.subset, !is.na(sslc.subset$L1_RESULT))
sslc.subset <- sslc.subset[!is.na(sslc.subset$L1_RESULT), ]
sslc.subset <- sslc.subset[is.na(sslc.subset$L1_RESULT), ]
sslc.subset <- sslc[is.na(sslc.subset$L1_RESULT), ]
sslc.subset <- sslc[is.na(sslc.subset$L1_RESULT), ]
View(sslc.subset)
sslc.subset <- sslc[!is.na(sslc.subset$L1_RESULT), ]
sslc.subset <- sslc[(is.na(sslc.subset$L1_RESULT)), ]
unique(sslc.subset$L1_RESULT)
library(arules)
# read the csv
sslc <- read.csv("data/Group4Data.csv")
# select the 8 columns that we are interested in
sslc.subset <- subset(sslc,
select=c("NRC_CLASS", "SCHOOL_TYPE", "URBAN_RURAL", "NRC_CASTE_CODE", "NRC_GENDER_CODE",
"NRC_MEDIUM", "NRC_PHYSICAL_CONDITION", "CANDIDATE_TYPE",
"L1_RESULT", "L2_RESULT", "L3_RESULT",
"S1_RESULT", "S2_RESULT", "S3_RESULT"))
# prune
prune <- function(rules.gen) {
subset.matrix <- is.subset(rules.gen, rules.gen)
subset.matrix[lower.tri(subset.matrix, diag = T)] <- NA
redundant <- colSums(subset.matrix, na.rm = T) >= 1
which(redundant)
rules.pruned <- rules.gen[!redundant]
return(rules.pruned)
}
# class
# unique(sslc.subset$NRC_CLASS)
sslc.subset$NRC_CLASS <- sapply(sslc.subset$NRC_CLASS, as.character)
sslc.subset$NRC_CLASS[sslc.subset$NRC_CLASS == "D   "] <- "Distinction"
sslc.subset$NRC_CLASS[sslc.subset$NRC_CLASS == "1"] <- "First"
sslc.subset$NRC_CLASS[sslc.subset$NRC_CLASS == "2"] <- "Second"
sslc.subset$NRC_CLASS[sslc.subset$NRC_CLASS == "PASS"] <- "Pass"
sslc.subset$NRC_CLASS[sslc.subset$NRC_CLASS == "FAIL"] <- "Fail"
sslc.subset$NRC_CLASS <- as.factor(sslc.subset$NRC_CLASS)
# school type
# unique(sslc.subset$SCHOOL_TYPE)
sslc.subset$SCHOOL_TYPE <- sapply(sslc.subset$SCHOOL_TYPE, as.character)
sslc.subset$SCHOOL_TYPE[sslc.subset$SCHOOL_TYPE == "U"] <- "Unaided"
sslc.subset$SCHOOL_TYPE[sslc.subset$SCHOOL_TYPE == "A"] <- "Aided"
sslc.subset$SCHOOL_TYPE[sslc.subset$SCHOOL_TYPE == "G"] <- "Government"
sslc.subset$SCHOOL_TYPE <- as.factor(sslc.subset$SCHOOL_TYPE)
# urban rural
# unique(sslc.subset$URBAN_RURAL)
sslc.subset$URBAN_RURAL <- sapply(sslc.subset$URBAN_RURAL, as.character)
sslc.subset$URBAN_RURAL[sslc.subset$URBAN_RURAL == "U"] <- "Urban"
sslc.subset$URBAN_RURAL[sslc.subset$URBAN_RURAL == "R"] <- "Rural"
sslc.subset$URBAN_RURAL <- as.factor(sslc.subset$URBAN_RURAL)
# caste codes
# unique(sslc.subset$NRC_CASTE_CODE)
sslc.subset$NRC_CASTE_CODE[sslc.subset$NRC_CASTE_CODE == 1] <- "SC"
sslc.subset$NRC_CASTE_CODE[sslc.subset$NRC_CASTE_CODE == 2] <- "ST"
sslc.subset$NRC_CASTE_CODE[sslc.subset$NRC_CASTE_CODE == 3] <- "Category 1"
sslc.subset$NRC_CASTE_CODE[sslc.subset$NRC_CASTE_CODE == 4] <- "General"
sslc.subset$NRC_CASTE_CODE <- as.factor(sslc.subset$NRC_CASTE_CODE)
# gender type
# unique(sslc.subset$NRC_GENDER_CODE)
sslc.subset$NRC_GENDER_CODE <- sapply(sslc.subset$NRC_GENDER_CODE, as.character)
sslc.subset$NRC_GENDER_CODE[sslc.subset$NRC_GENDER_CODE == "B"] <- "Boy"
sslc.subset$NRC_GENDER_CODE[sslc.subset$NRC_GENDER_CODE == "G"] <- "Girl"
sslc.subset$NRC_GENDER_CODE <- as.factor(sslc.subset$NRC_GENDER_CODE)
# medium
# unique(sslc.subset$NRC_MEDIUM)
sslc.subset$NRC_MEDIUM <- sapply(sslc.subset$NRC_MEDIUM, as.character)
sslc.subset$NRC_MEDIUM[sslc.subset$NRC_MEDIUM == "E"] <- "English"
sslc.subset$NRC_MEDIUM[sslc.subset$NRC_MEDIUM == "K"] <- "Kannada"
sslc.subset$NRC_MEDIUM[sslc.subset$NRC_MEDIUM == "L"] <- "Telegu"
sslc.subset$NRC_MEDIUM[sslc.subset$NRC_MEDIUM == "T"] <- "Tamil"
sslc.subset$NRC_MEDIUM[sslc.subset$NRC_MEDIUM == "U"] <- "Urdu"
sslc.subset$NRC_MEDIUM[sslc.subset$NRC_MEDIUM == "H"] <- "Hindi"
sslc.subset$NRC_MEDIUM[sslc.subset$NRC_MEDIUM == "M"] <- "Marathi"
sslc.subset$NRC_MEDIUM <- as.factor(sslc.subset$NRC_MEDIUM)
# physical condition
# unique(sslc.subset$NRC_PHYSICAL_CONDITION)
sslc.subset$NRC_PHYSICAL_CONDITION <- sapply(sslc.subset$NRC_PHYSICAL_CONDITION, as.character)
sslc.subset$NRC_PHYSICAL_CONDITION[sslc.subset$NRC_PHYSICAL_CONDITION == "N"] <- "Normal"
sslc.subset$NRC_PHYSICAL_CONDITION[sslc.subset$NRC_PHYSICAL_CONDITION == "B"] <- "Blind"
sslc.subset$NRC_PHYSICAL_CONDITION[sslc.subset$NRC_PHYSICAL_CONDITION == "D"] <- "Dumb"
sslc.subset$NRC_PHYSICAL_CONDITION[sslc.subset$NRC_PHYSICAL_CONDITION == "H"] <- "Hearing impaired"
sslc.subset$NRC_PHYSICAL_CONDITION[sslc.subset$NRC_PHYSICAL_CONDITION == "P"] <- "Physically handicapped"
sslc.subset$NRC_PHYSICAL_CONDITION[sslc.subset$NRC_PHYSICAL_CONDITION == "S"] <- "Spastic / dyslexia"
sslc.subset$NRC_PHYSICAL_CONDITION <- as.factor(sslc.subset$NRC_PHYSICAL_CONDITION)
# candidate type
# unique(sslc.subset$CANDIDATE_TYPE)
sslc.subset$CANDIDATE_TYPE <- sapply(sslc.subset$CANDIDATE_TYPE, as.character)
sslc.subset$CANDIDATE_TYPE[sslc.subset$CANDIDATE_TYPE == "RF"] <- "Regular Fresher"
sslc.subset$CANDIDATE_TYPE[sslc.subset$CANDIDATE_TYPE == "PF"] <- "Private Fresher"
sslc.subset$CANDIDATE_TYPE <- as.factor(sslc.subset$CANDIDATE_TYPE)
unique(sslc.subset$L1_RESULT)
sslc.subset$L1_RESULT <- sapply(sslc.subset$L1_RESULT, as.character)
sslc.subset$L1_RESULT[sslc.subset$L1_RESULT == "A"] <- "Absent"
sslc.subset$L1_RESULT[sslc.subset$L1_RESULT == "F"] <- "Fail"
sslc.subset$L1_RESULT[sslc.subset$L1_RESULT == "P"] <- "Pass"
sslc.subset$L1_RESULT <- as.factor(sslc.subset$L1_RESULT)
View(sslc.subset)
unique(sslc.subset$L2_RESULT)
sslc.subset$L2_RESULT <- sapply(sslc.subset$L2_RESULT, as.character)
sslc.subset$L2_RESULT[sslc.subset$L2_RESULT == "A"] <- "Absent"
sslc.subset$L2_RESULT[sslc.subset$L2_RESULT == "F"] <- "Fail"
sslc.subset$L2_RESULT[sslc.subset$L2_RESULT == "P"] <- "Pass"
sslc.subset$L2_RESULT <- as.factor(sslc.subset$L2_RESULT)
unique(sslc.subset$L1_RESULT)
unique(sslc.subset$L3_RESULT)
sslc.subset$L3_RESULT <- sapply(sslc.subset$L3_RESULT, as.character)
sslc.subset$L3_RESULT[sslc.subset$L3_RESULT == "A"] <- "Absent"
sslc.subset$L3_RESULT[sslc.subset$L3_RESULT == "F"] <- "Fail"
sslc.subset$L3_RESULT[sslc.subset$L3_RESULT == "P"] <- "Pass"
sslc.subset$L3_RESULT <- as.factor(sslc.subset$L3_RESULT)
unique(sslc.subset$L3_RESULT)
unique(sslc.subset$S1_RESULT)
sslc.subset$S1_RESULT <- sapply(sslc.subset$S1_RESULT, as.character)
sslc.subset$S1_RESULT[sslc.subset$S1_RESULT == "A"] <- "Absent"
sslc.subset$S1_RESULT[sslc.subset$S1_RESULT == "F"] <- "Fail"
sslc.subset$S1_RESULT[sslc.subset$S1_RESULT == "P"] <- "Pass"
sslc.subset$S1_RESULT <- as.factor(sslc.subset$S1_RESULT)
unique(sslc.subset$S1_RESULT)
unique(sslc.subset$S2_RESULT)
unique(sslc.subset$S2_RESULT)
sslc.subset$S2_RESULT <- sapply(sslc.subset$S2_RESULT, as.character)
sslc.subset$S2_RESULT[sslc.subset$S2_RESULT == "A"] <- "Absent"
sslc.subset$S2_RESULT[sslc.subset$S2_RESULT == "F"] <- "Fail"
sslc.subset$S2_RESULT[sslc.subset$S2_RESULT == "P"] <- "Pass"
unique(sslc.subset$S2_RESULT)
unique(sslc.subset$S3_RESULT)
sslc.subset$S3_RESULT <- sapply(sslc.subset$S3_RESULT, as.character)
sslc.subset$S3_RESULT[sslc.subset$S3_RESULT == "A"] <- "Absent"
sslc.subset$S3_RESULT[sslc.subset$S3_RESULT == "F"] <- "Fail"
sslc.subset$S3_RESULT[sslc.subset$S3_RESULT == "P"] <- "Pass"
sslc.subset$S3_RESULT <- as.factor(sslc.subset$S3_RESULT)
unique(sslc.subset$S3_RESULT)
rules <- apriori(sslc.subset,
appearance = list(rhs = c("URBAN_RURAL=Urban"),
default="lhs"))
View(sslc.subset)
sslc.subset$S2_RESULT <- as.factor(sslc.subset$S2_RESULT)
rules <- apriori(sslc.subset,
appearance = list(rhs = c("URBAN_RURAL=Urban"),
default="lhs"))
rules.sorted <- sort(rules, by = "lift")
inspect(rules.sorted)
inspect(prune(rules.sorted))
rules <- apriori(sslc.subset,
appearance = list(rhs = c("URBAN_RURAL=Urban"),
default="lhs"))
rules.sorted <- sort(rules, by = "lift")
inspect(rules.sorted)
rules <- apriori(sslc.subset,
appearance = list(rhs = c("URBAN_RURAL=Rural"),
default="lhs"))
rules.sorted <- sort(rules, by = "lift")
inspect(prune(rules.sorted))
rules <- apriori(sslc.subset,
parameter = list(minlen= 2, conf = 0.95),
appearance = list(rhs = c("URBAN_RURAL=Rural"),
default="lhs"))
rules <- apriori(sslc.subset,
parameter = list(minlen= 2, conf = 0.90),
appearance = list(rhs = c("URBAN_RURAL=Rural"),
default="lhs"))
rules <- apriori(sslc.subset,
parameter = list(conf = 0.90),
appearance = list(rhs = c("URBAN_RURAL=Rural"),
default="lhs"))
rules <- apriori(sslc.subset,
parameter = list(conf = 0.85),
appearance = list(rhs = c("URBAN_RURAL=Rural"),
default="lhs"))
rules.sorted <- sort(rules, by = "lift")
inspect(prune(rules.sorted))
rules <- apriori(sslc.subset,
appearance = list(rhs = c("URBAN_RURAL=Urban"),
default="lhs"))
sslc.urban <- subset(sslc.subset, subset = (URBAN_RURAL="Urban"))
sslc.urban <- subset(sslc.subset, subset = (URBAN_RURAL=="Urban"))
View(sslc.urban)
sslc.rural <- subset(sslc.subset, subset = (URBAN_RURAL=="Rural"))
rules <- apriori(sslc.urban)
rules <- apriori(sslc.urban)
rules.sorted <- sort(rules, by = "lift",
parameter = list(minlen= 2, sup = 0.5, conf = 0.90))
rules <- apriori(sslc.urban,
parameter = list(minlen= 2, sup = 0.5, conf = 0.90))
rules <- apriori(sslc.urban,
parameter = list(minlen= 2, sup = 0.8, conf = 0.90))
rules.sorted <- sort(rules, by = "lift")
inspect(prune(rules.sorted))
View(sslc.subset)
sslc.urban <- subset(sslc.subset[-3], subset = (URBAN_RURAL=="Urban"))
sslc.urban <- sslc.urban[-3]
View(sslc.urban)
sslc.rural <- sslc.rural[-3]
rules <- apriori(sslc.urban,
parameter = list(minlen= 2, sup = 0.8, conf = 0.90))
rules.sorted <- sort(rules, by = "lift")
inspect(rules.sorted)
inspect(prune(rules.sorted))
rules <- apriori(sslc.urban,
parameter = list(minlen= 2, sup = 0.2, conf = 0.90))
rules.sorted <- sort(rules, by = "lift")
inspect(prune(rules.sorted))
rules <- apriori(sslc.urban,
parameter = list(minlen= 2, sup = 0.6, conf = 0.90))
rules.sorted <- sort(rules, by = "lift")
inspect(rules.sorted)
inspect(prune(rules.sorted))
View(sslc.urban)
rules <- apriori(sslc.urban,
parameter = list(minlen= 2, sup = 0.6, conf = 0.90)),
appearance = list(rhs = c("NRC_GENDER_CODE=Boy"),
default="lhs"))
rules <- apriori(sslc.urban,
parameter = list(minlen= 2, sup = 0.6, conf = 0.90),
appearance = list(rhs = c("NRC_GENDER_CODE=Boy"),
default="lhs"))
rules <- apriori(sslc.urban,
appearance = list(rhs = c("NRC_GENDER_CODE=Boy"),
default="lhs"))
rules <- apriori(sslc.urban,
appearance = list(rhs = c("NRC_GENDER_CODE=Boy", "NRC_GENDER_CODE=Girl"),
default="lhs"))
rules <- apriori(sslc.urban,
appearance = list(lhs = c("NRC_GENDER_CODE=Boy", "NRC_GENDER_CODE=Girl"),
default="rhs"))
rules.sorted <- sort(rules, by = "lift")
inspect(rules.sorted)
rules <- apriori(sslc.rural,
appearance = list(lhs = c("NRC_GENDER_CODE=Boy", "NRC_GENDER_CODE=Girl"),
default="rhs"))
rules.sorted <- sort(rules, by = "lift")
inspect(rules.sorted)
inspect(prune(rules.sorted))
rules <- apriori(sslc.subset,
appearance = list(rhs = c("URBAN_RURAL=Urban"),
default="lhs"))
rules.sorted <- sort(rules, by = "lift")
inspect(rules.sorted)
rules <- apriori(sslc.subset,
appearance = list(rhs = c("URBAN_RURAL=Urban", "URBAN_RURAL=Rural"),
default="lhs"))
rules.sorted <- sort(rules, by = "lift")
inspect(prune(rules.sorted))
rules <- apriori(sslc.subset,
parameter = list(minlen= 2, sup = 0.5, conf = 0.95),
appearance = list(rhs = c("URBAN_RURAL=Urban", "URBAN_RURAL=Rural"),
default="lhs"))
rules.sorted <- sort(rules, by = "lift")
rules <- apriori(sslc.subset,
parameter = list(minlen= 2, conf = 0.95),
appearance = list(rhs = c("URBAN_RURAL=Urban", "URBAN_RURAL=Rural"),
default="lhs"))
rules <- apriori(sslc.subset,
parameter = list(minlen= 2, conf = 0.75),
appearance = list(rhs = c("URBAN_RURAL=Urban", "URBAN_RURAL=Rural"),
default="lhs"))
rules <- apriori(sslc.subset,
parameter = list(minlen= 2, conf = 0.85),
appearance = list(rhs = c("URBAN_RURAL=Urban", "URBAN_RURAL=Rural"),
default="lhs"))
rules.sorted <- sort(rules, by = "lift")
inspect(prune(rules.sorted))
rules <- apriori(sslc.subset,
appearance = list(rhs = c("URBAN_RURAL=Urban"),
default="lhs"))
rules.sorted <- sort(rules, by = "lift")
inspect(rules.sorted)
inspect(prune(rules.sorted))
library(stringr)
library(plyr)
library(MASS)
library(ISLR)
library(car)
# read the csv
sslc <- read.csv("data/Group4Data.csv")
# select the 8 columns that we are interested in
sslc.subset <- subset(sslc,
select=c("REG_NO", "L1_MARKS", "L2_MARKS", "L3_MARKS",
"S1_MARKS", "S2_MARKS", "S3_MARKS", "TOTAL_MARKS", "NRC_CLASS"))
# remove all the non numeric characters
nonNumericCharactersRemover <- function(x) {
x <- str_replace_all(x, pattern="[^0-9]", replacement="")
return(as.numeric(x))
}
sslc.subset <- data.frame(sslc.subset[1],
lapply(sslc.subset[2:8], nonNumericCharactersRemover),
sslc.subset[9])
# eliminate the unwanted rows
sslc.subset <- subset(sslc.subset, subset=(L1_MARKS <= 125 & L2_MARKS <= 100 & L3_MARKS <= 100 &
S1_MARKS <= 100 & S2_MARKS <= 100 & S3_MARKS <= 100 & TOTAL_MARKS <= 625))
sslc.fit <- lm(TOTAL_MARKS~.-REG_NO-NRC_CLASS, data=sslc.subset)
summary(sslc.fit)
sslc.synergy <- lm(TOTAL_MARKS~.-REG_NO-NRC_CLASS+L1_MARKS*L2_MARKS*L3_MARKS*S1_MARKS*S2_MARKS*S3_MARKS, data=sslc.subset)
summary(sslc.synergy)$r.sq
summary(sslc.synergy)
roundOffMarks <- function(x) {
return(as.numeric(round(x,digits=-1)))
}
sslc.classificationset <- data.frame(sslc.subset[1],
lapply(sslc.subset[2:7], roundOffMarks),
sslc.subset[9])
library(e1071)
index <- 1:nrow(sslc.classificationset)
testindex <- sample(index, trunc(length(index)/3))
testrecords <- sslc.classificationset[testindex,]
traindrecords <- sslc.classificationset[-testindex,]
# use all
NBayes.all <- naiveBayes(traindrecords[, 2:7],traindrecords[, 8])
NBpred.all <- predict(NBayes.all , testrecords[, -8])
NBtab.all <- table(true = testrecords[, 8], pred = NBpred.all)
# Use ones suggested by regression
NBayes.reg <- naiveBayes(traindrecords[, c(2, 3, 6, 7)],traindrecords[, 8])
NBpred.reg <- predict(NBayes.reg , testrecords[, -8])
NBtab.reg <- table(true = testrecords[, 8], pred = NBpred.reg)
# use worst
NBayes.worst <- naiveBayes(traindrecords[, 5:6],traindrecords[, 8])
NBpred.worst <- predict(NBayes.worst , testrecords[, -8])
NBtab.worst <- table(true = testrecords[, 8], pred = NBpred.worst)
confusionMatrix(NBtab.all)
library(caret)
confusionMatrix(NBtab.all)
confusionMatrix(NBtab.reg)
confusionMatrix(NBtab.worst)
library(arules)
# read the csv
sslc <- read.csv("data/Group4Data.csv")
# select the 8 columns that we are interested in
sslc.subset <- subset(sslc,
select=c("NRC_CLASS", "SCHOOL_TYPE", "URBAN_RURAL", "NRC_CASTE_CODE", "NRC_GENDER_CODE",
"NRC_MEDIUM", "NRC_PHYSICAL_CONDITION", "CANDIDATE_TYPE",
"L1_RESULT", "L2_RESULT", "L3_RESULT",
"S1_RESULT", "S2_RESULT", "S3_RESULT"))
# prune
prune <- function(rules.gen) {
subset.matrix <- is.subset(rules.gen, rules.gen)
subset.matrix[lower.tri(subset.matrix, diag = T)] <- NA
redundant <- colSums(subset.matrix, na.rm = T) >= 1
which(redundant)
rules.pruned <- rules.gen[!redundant]
return(rules.pruned)
}
# class
# unique(sslc.subset$NRC_CLASS)
sslc.subset$NRC_CLASS <- sapply(sslc.subset$NRC_CLASS, as.character)
sslc.subset$NRC_CLASS[sslc.subset$NRC_CLASS == "D   "] <- "Distinction"
sslc.subset$NRC_CLASS[sslc.subset$NRC_CLASS == "1"] <- "First"
sslc.subset$NRC_CLASS[sslc.subset$NRC_CLASS == "2"] <- "Second"
sslc.subset$NRC_CLASS[sslc.subset$NRC_CLASS == "PASS"] <- "Pass"
sslc.subset$NRC_CLASS[sslc.subset$NRC_CLASS == "FAIL"] <- "Fail"
sslc.subset$NRC_CLASS <- as.factor(sslc.subset$NRC_CLASS)
# school type
# unique(sslc.subset$SCHOOL_TYPE)
sslc.subset$SCHOOL_TYPE <- sapply(sslc.subset$SCHOOL_TYPE, as.character)
sslc.subset$SCHOOL_TYPE[sslc.subset$SCHOOL_TYPE == "U"] <- "Unaided"
sslc.subset$SCHOOL_TYPE[sslc.subset$SCHOOL_TYPE == "A"] <- "Aided"
sslc.subset$SCHOOL_TYPE[sslc.subset$SCHOOL_TYPE == "G"] <- "Government"
sslc.subset$SCHOOL_TYPE <- as.factor(sslc.subset$SCHOOL_TYPE)
# urban rural
# unique(sslc.subset$URBAN_RURAL)
sslc.subset$URBAN_RURAL <- sapply(sslc.subset$URBAN_RURAL, as.character)
sslc.subset$URBAN_RURAL[sslc.subset$URBAN_RURAL == "U"] <- "Urban"
sslc.subset$URBAN_RURAL[sslc.subset$URBAN_RURAL == "R"] <- "Rural"
sslc.subset$URBAN_RURAL <- as.factor(sslc.subset$URBAN_RURAL)
# caste codes
# unique(sslc.subset$NRC_CASTE_CODE)
sslc.subset$NRC_CASTE_CODE[sslc.subset$NRC_CASTE_CODE == 1] <- "SC"
sslc.subset$NRC_CASTE_CODE[sslc.subset$NRC_CASTE_CODE == 2] <- "ST"
sslc.subset$NRC_CASTE_CODE[sslc.subset$NRC_CASTE_CODE == 3] <- "Category 1"
sslc.subset$NRC_CASTE_CODE[sslc.subset$NRC_CASTE_CODE == 4] <- "General"
sslc.subset$NRC_CASTE_CODE <- as.factor(sslc.subset$NRC_CASTE_CODE)
# gender type
# unique(sslc.subset$NRC_GENDER_CODE)
sslc.subset$NRC_GENDER_CODE <- sapply(sslc.subset$NRC_GENDER_CODE, as.character)
sslc.subset$NRC_GENDER_CODE[sslc.subset$NRC_GENDER_CODE == "B"] <- "Boy"
sslc.subset$NRC_GENDER_CODE[sslc.subset$NRC_GENDER_CODE == "G"] <- "Girl"
sslc.subset$NRC_GENDER_CODE <- as.factor(sslc.subset$NRC_GENDER_CODE)
# medium
# unique(sslc.subset$NRC_MEDIUM)
sslc.subset$NRC_MEDIUM <- sapply(sslc.subset$NRC_MEDIUM, as.character)
sslc.subset$NRC_MEDIUM[sslc.subset$NRC_MEDIUM == "E"] <- "English"
sslc.subset$NRC_MEDIUM[sslc.subset$NRC_MEDIUM == "K"] <- "Kannada"
sslc.subset$NRC_MEDIUM[sslc.subset$NRC_MEDIUM == "L"] <- "Telegu"
sslc.subset$NRC_MEDIUM[sslc.subset$NRC_MEDIUM == "T"] <- "Tamil"
sslc.subset$NRC_MEDIUM[sslc.subset$NRC_MEDIUM == "U"] <- "Urdu"
sslc.subset$NRC_MEDIUM[sslc.subset$NRC_MEDIUM == "H"] <- "Hindi"
sslc.subset$NRC_MEDIUM[sslc.subset$NRC_MEDIUM == "M"] <- "Marathi"
sslc.subset$NRC_MEDIUM <- as.factor(sslc.subset$NRC_MEDIUM)
# physical condition
# unique(sslc.subset$NRC_PHYSICAL_CONDITION)
sslc.subset$NRC_PHYSICAL_CONDITION <- sapply(sslc.subset$NRC_PHYSICAL_CONDITION, as.character)
sslc.subset$NRC_PHYSICAL_CONDITION[sslc.subset$NRC_PHYSICAL_CONDITION == "N"] <- "Normal"
sslc.subset$NRC_PHYSICAL_CONDITION[sslc.subset$NRC_PHYSICAL_CONDITION == "B"] <- "Blind"
sslc.subset$NRC_PHYSICAL_CONDITION[sslc.subset$NRC_PHYSICAL_CONDITION == "D"] <- "Dumb"
sslc.subset$NRC_PHYSICAL_CONDITION[sslc.subset$NRC_PHYSICAL_CONDITION == "H"] <- "Hearing impaired"
sslc.subset$NRC_PHYSICAL_CONDITION[sslc.subset$NRC_PHYSICAL_CONDITION == "P"] <- "Physically handicapped"
sslc.subset$NRC_PHYSICAL_CONDITION[sslc.subset$NRC_PHYSICAL_CONDITION == "S"] <- "Spastic / dyslexia"
sslc.subset$NRC_PHYSICAL_CONDITION <- as.factor(sslc.subset$NRC_PHYSICAL_CONDITION)
# candidate type
# unique(sslc.subset$CANDIDATE_TYPE)
sslc.subset$CANDIDATE_TYPE <- sapply(sslc.subset$CANDIDATE_TYPE, as.character)
sslc.subset$CANDIDATE_TYPE[sslc.subset$CANDIDATE_TYPE == "RF"] <- "Regular Fresher"
sslc.subset$CANDIDATE_TYPE[sslc.subset$CANDIDATE_TYPE == "PF"] <- "Private Fresher"
sslc.subset$CANDIDATE_TYPE <- as.factor(sslc.subset$CANDIDATE_TYPE)
# l1
# unique(sslc.subset$L1_RESULT)
sslc.subset$L1_RESULT <- sapply(sslc.subset$L1_RESULT, as.character)
sslc.subset$L1_RESULT[sslc.subset$L1_RESULT == "A"] <- "Absent"
sslc.subset$L1_RESULT[sslc.subset$L1_RESULT == "F"] <- "Fail"
sslc.subset$L1_RESULT[sslc.subset$L1_RESULT == "P"] <- "Pass"
sslc.subset$L1_RESULT <- as.factor(sslc.subset$L1_RESULT)
# l2
# unique(sslc.subset$L2_RESULT)
sslc.subset$L2_RESULT <- sapply(sslc.subset$L2_RESULT, as.character)
sslc.subset$L2_RESULT[sslc.subset$L2_RESULT == "A"] <- "Absent"
sslc.subset$L2_RESULT[sslc.subset$L2_RESULT == "F"] <- "Fail"
sslc.subset$L2_RESULT[sslc.subset$L2_RESULT == "P"] <- "Pass"
sslc.subset$L2_RESULT <- as.factor(sslc.subset$L2_RESULT)
# l3
# unique(sslc.subset$L3_RESULT)
sslc.subset$L3_RESULT <- sapply(sslc.subset$L3_RESULT, as.character)
sslc.subset$L3_RESULT[sslc.subset$L3_RESULT == "A"] <- "Absent"
sslc.subset$L3_RESULT[sslc.subset$L3_RESULT == "F"] <- "Fail"
sslc.subset$L3_RESULT[sslc.subset$L3_RESULT == "P"] <- "Pass"
sslc.subset$L3_RESULT <- as.factor(sslc.subset$L3_RESULT)
# s1
# unique(sslc.subset$S1_RESULT)
sslc.subset$S1_RESULT <- sapply(sslc.subset$S1_RESULT, as.character)
sslc.subset$S1_RESULT[sslc.subset$S1_RESULT == "A"] <- "Absent"
sslc.subset$S1_RESULT[sslc.subset$S1_RESULT == "F"] <- "Fail"
sslc.subset$S1_RESULT[sslc.subset$S1_RESULT == "P"] <- "Pass"
sslc.subset$S1_RESULT <- as.factor(sslc.subset$S1_RESULT)
# s2
# unique(sslc.subset$S2_RESULT)
sslc.subset$S2_RESULT <- sapply(sslc.subset$S2_RESULT, as.character)
sslc.subset$S2_RESULT[sslc.subset$S2_RESULT == "A"] <- "Absent"
sslc.subset$S2_RESULT[sslc.subset$S2_RESULT == "F"] <- "Fail"
sslc.subset$S2_RESULT[sslc.subset$S2_RESULT == "P"] <- "Pass"
sslc.subset$S2_RESULT <- as.factor(sslc.subset$S2_RESULT)
# s3
# unique(sslc.subset$S3_RESULT)
sslc.subset$S3_RESULT <- sapply(sslc.subset$S3_RESULT, as.character)
sslc.subset$S3_RESULT[sslc.subset$S3_RESULT == "A"] <- "Absent"
sslc.subset$S3_RESULT[sslc.subset$S3_RESULT == "F"] <- "Fail"
sslc.subset$S3_RESULT[sslc.subset$S3_RESULT == "P"] <- "Pass"
sslc.subset$S3_RESULT <- as.factor(sslc.subset$S3_RESULT)
sslc.urban <- subset(sslc.subset, subset = (URBAN_RURAL=="Urban"))
sslc.urban <- sslc.urban[-3]
sslc.rural <- subset(sslc.subset, subset = (URBAN_RURAL=="Rural"))
sslc.rural <- sslc.rural[-3]
rules <- apriori(sslc.subset,
appearance = list(rhs = c("URBAN_RURAL=Urban"),
default="lhs"))
rules.sorted <- sort(rules, by = "lift")
inspect(rules.sorted)
rules <- apriori(sslc.subset,
parameter = list(conf = 0.85),
appearance = list(rhs = c("URBAN_RURAL=Rural"),
default="lhs"))
rules.sorted <- sort(rules, by = "lift")
inspect(rules.sorted)
inspect(prune(rules.sorted))
rules <- apriori(sslc.subset,
appearance = list(rhs = c("URBAN_RURAL=Urban"),
default="lhs"))
rules.sorted <- sort(rules, by = "lift")
inspect(rules.sorted)
rules <- apriori(sslc.subset,
parameter = list(conf = 0.85),
appearance = list(rhs = c("URBAN_RURAL=Rural"),
default="lhs"))
rules.sorted <- sort(rules, by = "lift")
inspect(prune(rules.sorted))
